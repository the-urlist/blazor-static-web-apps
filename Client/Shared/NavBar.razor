@using BlazorApp.Shared

@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@inject HttpClient Http


<header id="navbar" class="header">
  <nav class="navbar container" role="navigation" aria-label="main navigation">
    <div class="navbar-brand">
      <a class="navbar-item" href="/">
        <img id="logo-img" class="mt-4" width="100" height="60" src="/images/logo.svg" alt="urlist logo" />
      </a>
      <a id="hamburger" role="button" class="beta-bump navbar-burger burger @(showMenu ? "is-active" : "")"
        aria-label="menu" aria-expanded="false" data-target="navbarBasicExample" @onclick="@ToggleMenu">
        <img src="images/burger.svg" alt="toggle menu" width="60" height="60" />
      </a>
    </div>
    <div class="beta-bump navbar-menu @(showMenu ? "is-active" : "")">
      <div class="navbar-start">
        <a class="navbar-item" @onclick="NewList">
          <span class="icon is-large navbar-icon">
            <i class="fas fa-lg fa-plus-circle"></i>
          </span>
          New
        </a>
        @if (loggedIn)
        {
          <a class="navbar-item" href="/s/mylists">
            <span class="icon is-large navbar-icon">
              <i class="fas fa-lg fa-user-circle"></i>
            </span>
            My Lists
          </a>
        }
        <a href="https://aka.ms/theurlist" class="navbar-item" target="_new">
          <span class="icon is-large navbar-icon">
            <i class="fas fa-lg fa-question-circle"></i>
          </span>
          About
        </a>
        <a href="https://theurlist.com/s/terms" class="navbar-item" target="_new">
          <span class="icon is-large navbar-icon">
            <i class="fas fa-lg fa-info"></i>
          </span>
          Terms
        </a>
      </div>
      <div class="navbar-end">
        <div class="navbar-item has-dropdown is-hoverable">
          <ThemeSwitcher></ThemeSwitcher>
        </div>
        @if (loggedIn)
        {
          <div class="navbar-item has-dropdown is-hoverable">
            <a class="navbar-link">
              <div class="columns is-gapless is-mobile is-vcentered">
                <div class="column is-narrow">
                  <figure id="profileImage" class="image">
                    <img class="is-rounded" src="@StateContainer.User?.UserImage" />
                  </figure>
                </div>
                <div class="column">
                  <span>@StateContainer.User?.UserName</span>
                </div>
              </div>
            </a>
            <div class="navbar-dropdown">
              <span class="navbar-item">Signed in with @StateContainer.User?.ClientPrincipal?.IdentityProvider</span>
              <a class="navbar-item" href="@($"/.auth/logout")">
                <span class="icon is-medium navbar-icon">
                  <i class="fas fa-sign-out-alt"></i>
                </span>
                Log Out
              </a>
            </div>
          </div>
        }
        else
        {
          <a class="navbar-item" @onclick="ToggleModal">
            <span class="icon is-large navbar-icon">
              <i class="fas fa-lg fa-sign-in-alt"></i>
            </span>
            Login
          </a>
        }
      </div>
    </div>
  </nav>
  <ModalLogin @ref="modalLogin"></ModalLogin>
  <ModalConfirm @ref="modalConfirm" Type="@ModalConfirm.ModalType.primary" Title="Clear this list?"
    Prompt="This will reset the current list and you will lose all changes. Are you sure you want to do that?"
    OnOK="ResetLinkBundle">
  </ModalConfirm>
</header>

@code {
  private bool loggedIn = false;
  private bool showMenu = false;
  private ModalLogin? modalLogin;
  private ModalConfirm? modalConfirm;

  private void NewList()
  {
    @* if the current page is /s/edit and the linbundle has link items *@
    if (NavigationManager.Uri.Contains("/s/new") && StateContainer.LinkBundle?.Links?.Count > 0)
    {
      modalConfirm?.Show();
    }
    else
    {
      ResetLinkBundle();
      NavigationManager.NavigateTo("/s/new");
    }
  }
  private void ToggleMenu()
  {
    showMenu = !showMenu;
  }

  private void ToggleModal()
  {
    modalLogin?.Show();
  }

  private void ResetLinkBundle()
  {
    StateContainer.LinkBundle = new LinkBundle();
    NavigationManager.NavigateTo("/s/new");
  }
  protected override async Task OnInitializedAsync()
  {
    await GetClientPrincipalAsync();

    // try to load the last list they were on from localstorage
    await StateContainer.LoadLinkBundleFromLocalStorage();
  }

  private async Task GetClientPrincipalAsync()
  {
    try
    {
      var result = await Http.GetFromJsonAsync<ClientPrincipalWrapper>(".auth/me");

      // if the client principal is null, then they are not logged in
      if (result?.ClientPrincipal == null)
      {
        return;
      }

      StateContainer.User = new User(result.ClientPrincipal);

      loggedIn = true;

      StateHasChanged();
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message);
    }
  }
}
